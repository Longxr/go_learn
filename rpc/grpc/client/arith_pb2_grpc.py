# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import arith_pb2 as arith__pb2


class ArithServiceStub(object):
  """rpc方法
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Multiply = channel.unary_unary(
        '/pb.ArithService/Multiply',
        request_serializer=arith__pb2.ArithRequest.SerializeToString,
        response_deserializer=arith__pb2.ArithResponse.FromString,
        )
    self.Divide = channel.unary_unary(
        '/pb.ArithService/Divide',
        request_serializer=arith__pb2.ArithRequest.SerializeToString,
        response_deserializer=arith__pb2.ArithResponse.FromString,
        )


class ArithServiceServicer(object):
  """rpc方法
  """

  def Multiply(self, request, context):
    """乘法运算方法
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Divide(self, request, context):
    """除法运算方法
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ArithServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Multiply': grpc.unary_unary_rpc_method_handler(
          servicer.Multiply,
          request_deserializer=arith__pb2.ArithRequest.FromString,
          response_serializer=arith__pb2.ArithResponse.SerializeToString,
      ),
      'Divide': grpc.unary_unary_rpc_method_handler(
          servicer.Divide,
          request_deserializer=arith__pb2.ArithRequest.FromString,
          response_serializer=arith__pb2.ArithResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'pb.ArithService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
